/*
 * Copyright (c) 2014 Nurun Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * =================================================================================================================
 * Configures the dependencies for the build script itself.
 */
buildscript {
    repositories { mavenCentral() }
}

/*
 * =================================================================================================================
 * Base configuration for all projects.
 */
allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

/*
 * Disables the pesky javadoc warnings on Java 8.
 */
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

/*
 * =================================================================================================================
 * Base configuration for all subprojects projects.
 */
subprojects {

    apply plugin: "java"
    apply plugin: 'maven'
    apply plugin: "jacoco"

    version = '2.0-MILESTONE-2-SNAPSHOT'
    group = 'com.nudroid'

    /*
     * =============================================================================================================
     * Creates a new classpath configuration for classes required only during compile time.
     */
    configurations { compileOnly }

    repositories {
        mavenCentral()
        maven { url 'http://repo.springsource.org/libs-release' }
        maven { url 'http://repo.springsource.org/libs-milestone' }
        maven { url 'https://repository.jboss.org' }
    }

    dependencies {
        testCompile 'org.testng:testng:6.8.5'
        testCompile 'org.mockito:mockito-all:1.9.5'
    }

    test {
        useTestNG() {
            suiteXmlBuilder().suite(name: 'model-suite', parallel: 'tests') {
                test(name: 'all-tests') {
                    packages {
                        'package'(name: 'com.nudroid.annotation.processor.model')
                    }
                }
            }
        }
    }

    test.doLast {
        tasks.jacocoTestReport.execute()
    }

    jacoco {
        toolVersion = "0.7.0.201403182114"
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html {
                enabled true
                destination "${buildDir}/reports/jacoco/html"
            }
        }
    }

    /*
     * =============================================================================================================
     * Adds the compileOnly dependencies to the compile, model and javadoc classpaths and eclipse and idea project files.
     * Sets-up idea to download sources and javadoc.
     */
    sourceSets.main.compileClasspath += configurations.compileOnly
    sourceSets.test.compileClasspath += configurations.compileOnly

    javadoc {
        classpath += configurations.compileOnly
    }

    eclipse.classpath.plusConfigurations += [configurations.compileOnly]

    idea {

        module {
            //if you need to put 'provided' dependencies on the classpath
            scopes.PROVIDED.plus += configurations.compileOnly

            downloadJavadoc = true
            downloadSources = true
        }
    }

    /*
     * =============================================================================================================
     * Configure source and javadoc export.
     * Sets up idea to download sources and javadoc.
     */
    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourceJar
        archives javadocJar
    }
}

/*
 * =================================================================================================================
 * nudroid-providers-core
 * Configuration for nudroid-providers-core
 */
project(':nudroid-providers-core') {

    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_6

    dependencies {
        compileOnly 'com.google.android:android:2.2.1'
    }
}

/*
 * =================================================================================================================
 * nudroid-annotations
 * Configuration for nudroid-annotations
 */
project(':nudroid-annotations') {

    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_6

    dependencies {
        compile project(':nudroid-providers-core')
    }
}

/*
 * =================================================================================================================
 * nudroid-annotations-processor
 * Configuration for nudroid-annotations-processor.
 */
project(':nudroid-annotations-processor') {

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        compile project(':nudroid-annotations')
        compile project(':nudroid-providers-core')

        compileOnly 'com.google.android:android:2.2.1'
        compileOnly 'com.google.guava:guava:15.0'
        compileOnly 'org.antlr:ST4:4.0.7'

        testCompile 'com.google.testing.compile:compile-testing:0.5'
        testCompile 'com.google.android:android:2.2.1'
        testCompile 'com.google.guava:guava:15.0'
        testCompile 'org.antlr:ST4:4.0.7'
        testCompile files("${System.properties['java.home']}/../lib/tools.jar")
    }
}

/*
 * =================================================================================================================
 * nudroid-annotations-processor-all
 * Configuration for nudroid-annotations-processor-all.
 */
project(':nudroid-annotations-processor-all') {

    dependencies {
        compile project(':nudroid-annotations')
        compile project(':nudroid-providers-core')
        compile 'com.google.android:android:2.2.1'
        compileOnly project(':nudroid-annotations-processor')
        compileOnly 'com.google.guava:guava:15.0'
        compileOnly 'org.antlr:ST4:4.0.7'
    }

    jar {
        from {
            configurations.compileOnly.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}