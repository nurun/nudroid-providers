##-----------------------------------------------------------------
## Add commas in a comma separated list to all items but the last
## Param: $index - pass in $velocityCount
## Param: $list  - pass in your velocity list variable
##-----------------------------------------------------------------
#macro( delimiterIfNeeded $index $list $delimiter )
#set ( $lastone = $list.size() - 1 )
#if( $index <= $lastone )$delimiter#else#end
#end

#macro( generateQueryParameterNamesMatcher $methodParameterNames)
#foreach( $parameterName in $methodParameterNames)parameterNames.contains("$parameterName")#delimiterIfNeeded( $velocityCount $methodParameterNames " && " )#end
#end

#macro( generateParamsList $paramaters)
#foreach( $parameter in $paramaters)
#if($parameter.isProjection()) projection#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif($parameter.isSelection()) selection#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif($parameter.isSelectionArgs()) selectionArgs#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif($parameter.isSortOrder()) sortOrder#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif($parameter.isContentValues()) contentValues#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif($parameter.isContentUri()) uri#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif($parameter.isString())
  #if($parameter.isPathParameter()) pathSegments.get($parameter.getPathParamPosition())#delimiterIfNeeded( $velocityCount $paramaters ", " )
  #elseif($parameter.isQueryParameter()) uri.getQueryParameter("$parameter.getQueryParameterName()")#delimiterIfNeeded( $velocityCount $paramaters ", " )#end
#else
  #if($parameter.isPathParameter()) pathSegments.get($parameter.getPathPosition())#delimiterIfNeeded( $velocityCount $paramaters ", " )
  #elseif($parameter.isQueryParameter()) uri.getQueryParameter("$parameter.getQueryParameterName()")#delimiterIfNeeded( $velocityCount $paramaters ", " )#end
#end
#end
#end
package com.nudroid.persistence;

import java.util.List;
import java.util.Set;

import java.util.Set;

import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;

import com.nurun.persistence.temp.vision.ContentUriRouter;

import $delegateClass.getName();
#[[
/**
 * @author Auto-generated by Nudroid's persistence annotation processor.
 */
]]#public class ${delegateClass.getSimpleName()}Router implements ContentUriRouter {

    private $delegateClass.getSimpleName() delegate;

    public ${delegateClass.getSimpleName()}Router($delegateClass.getSimpleName() delegate) {
    
        this.delegate = delegate;
    }
#[[    
    /**
     * <p/>
     * {@inheritDoc}
     * 
     * @see com.nurun.persistence.temp.vision.ContentUriRouter#update(android.net.Uri, android.content.ContentValues,
     *      java.lang.String, java.lang.String[])
     */
]]#
    @Override
    public int update(Uri uri, ContentValues contentValues, String selection, String[] selectionArgs) {

        return 0;
    }
#[[
    /**
     * <p/>
     * {@inheritDoc}
     * 
     * @see com.nurun.persistence.temp.vision.ContentUriRouter#query(android.net.Uri, java.lang.String[],
     *      java.lang.String, java.lang.String[], java.lang.String)
     */
]]#
    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {

        List<String> pathSegments = uri.getPathSegments();
        Set<String> parameterNames = uri.getQueryParameterNames();
    
        switch (ContentUriRegistry.URI_MATCHER.match(uri)) {
#foreach( $uriId in $classUriIds )
        case $uriId:

#foreach( $delegateMethod in $delegateMethods.get($uriId) )            
#set( $placeholderCount = $delegateMethod.getQueryPlaceholderCount())
#if ( $placeholderCount == 0 )
            if (parameterNames.size() == $placeholderCount) {

                return delegate.$delegateMethod.getName()(#generateParamsList($delegateMethod.getParameters()));
            }
#else
            if (parameterNames.size() == $placeholderCount && #generateQueryParameterNamesMatcher($delegateMethod.getQueryPlaceholderNames())) {

                return delegate.$delegateMethod.getName()(#generateParamsList($delegateMethod.getParameters()));
            }
            
#end
#end

            throw new IllegalArgumentException(String.format("Uri %s is not properly mapped in content provider delegate %s",
                    uri, delegate.getClass()));
#end
        default:
            throw new IllegalArgumentException(String.format("Uri %s is not properly mapped in content provider delegate %s",
                    uri, delegate.getClass()));
        }
    }
#[[
    /**
     * <p/>
     * {@inheritDoc}
     * 
     * @see com.nurun.persistence.temp.vision.ContentUriRouter#insert(android.net.Uri, android.content.ContentValues)
     */
]]#
    @Override
    public Uri insert(Uri uri, ContentValues values) {

        return null;
    }
#[[
    /**
     * <p/>
     * {@inheritDoc}
     * 
     * @see com.nurun.persistence.temp.vision.ContentUriRouter#getType(android.net.Uri)
     */
]]#
    @Override
    public String getType(Uri uri) {

        return null;
    }
#[[
    /**
     * <p/>
     * {@inheritDoc}
     * 
     * @see com.nurun.persistence.temp.vision.ContentUriRouter#delete(android.net.Uri, java.lang.String,
     *      java.lang.String[])
     */
]]#
    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {

        return 0;
    }

    @SuppressWarnings("unchecked")
    private <T> T convert(String queryParameter, Class<T> clazz) {

        if (clazz.equals(Integer.class)) {
            return (T) Integer.valueOf(Integer.parseInt(queryParameter));
        }

        if (clazz.equals(Long.class)) {
            return (T) Long.valueOf(Long.parseLong(queryParameter));
        }

        if (clazz.equals(Float.class)) {
            return (T) Float.valueOf(Float.parseFloat(queryParameter));
        }

        if (clazz.equals(Double.class)) {
            return (T) Double.valueOf(Double.parseDouble(queryParameter));
        }
        
        throw new IllegalArgumentException(String.format("Unable to convert string '%s' to type %s.", queryParameter, clazz.getName()));
    }
}