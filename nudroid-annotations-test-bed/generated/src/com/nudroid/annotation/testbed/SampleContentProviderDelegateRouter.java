package com.nudroid.annotation.testbed;

import android.content.Context;
import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;
import android.content.UriMatcher;

import com.nudroid.provider.interceptor.ContentProviderContext;

/**
 * @author Auto-generated by Nudroid's provider annotation processor.
 */
public class SampleContentProviderDelegateRouter {

    static final UriMatcher URI_MATCHER;

    static {
        URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);

        URI_MATCHER.addURI("com.nudroid.samples", "*", 1);
    }

    private com.nudroid.annotation.testbed.SampleContentProviderDelegate mDelegate;

    public SampleContentProviderDelegateRouter(com.nudroid.annotation.testbed.SampleContentProviderDelegate delegate) {

        this.mDelegate = delegate;
    }

    /**
     * @see android.content.ContentProvider#query(android.net.Uri, java.lang.String[],
     *      java.lang.String, java.lang.String[], java.lang.String)
     */
    public Cursor query(Context context, Uri uri, String[] projection, String selection,
            String[] selectionArgs, String sortOrder) {

        ContentProviderContext contentProviderContext = null;
        Cursor result = null;

        switch (URI_MATCHER.match(uri)) {
        case 1:
        {
            if (contentProviderContext.uri.getQueryParameter("com.nudroid.provider.interceptor.cache.CacheInterceptor.cacheId") != null && contentProviderContext.uri.getQueryParameter("extra") != null) {
                java.util.List<String> pathSegments = uri.getPathSegments();

                contentProviderContext = new ContentProviderContext(context, uri, projection,
                        selection, selectionArgs, sortOrder, null);

                contentProviderContext.placeholders.put("extra", contentProviderContext.uri.getQueryParameter("extra"));
                contentProviderContext.placeholders.put("cacheId", contentProviderContext.uri.getQueryParameter("com.nudroid.provider.interceptor.cache.CacheInterceptor.cacheId"));
                contentProviderContext.placeholders.put("contentType", pathSegments.get(0));

                com.nudroid.annotation.testbed.MyCacheInterceptor lMyCacheInterceptor = 
                        new com.nudroid.annotation.testbed.MyCacheInterceptor();

                lMyCacheInterceptor.onCreate(contentProviderContext);
                lMyCacheInterceptor.beforeQuery(contentProviderContext);


                result = mDelegate.contentTypeExtraCache(contentProviderContext.placeholders.get("contentType"), contentProviderContext.placeholders.get("extra"), contentProviderContext.placeholders.get("cacheId"));
                result = lMyCacheInterceptor.afterQuery(contentProviderContext, result);

                return result;
            }

            if (contentProviderContext.uri.getQueryParameter("com.nudroid.provider.interceptor.cache.CacheInterceptor.cacheId") != null) {
                java.util.List<String> pathSegments = uri.getPathSegments();

                contentProviderContext = new ContentProviderContext(context, uri, projection,
                        selection, selectionArgs, sortOrder, null);

                contentProviderContext.placeholders.put("cacheId", contentProviderContext.uri.getQueryParameter("com.nudroid.provider.interceptor.cache.CacheInterceptor.cacheId"));
                contentProviderContext.placeholders.put("contentType", pathSegments.get(0));

                com.nudroid.annotation.testbed.MyCacheInterceptor lMyCacheInterceptor = 
                        new com.nudroid.annotation.testbed.MyCacheInterceptor();

                lMyCacheInterceptor.onCreate(contentProviderContext);
                lMyCacheInterceptor.beforeQuery(contentProviderContext);


                result = mDelegate.contentTypeCache(contentProviderContext.placeholders.get("contentType"), contentProviderContext.placeholders.get("cacheId"));
                result = lMyCacheInterceptor.afterQuery(contentProviderContext, result);

                return result;
            }

            if (contentProviderContext.uri.getQueryParameter("extra") != null) {
                java.util.List<String> pathSegments = uri.getPathSegments();

                contentProviderContext = new ContentProviderContext(context, uri, projection,
                        selection, selectionArgs, sortOrder, null);

                contentProviderContext.placeholders.put("extra", contentProviderContext.uri.getQueryParameter("extra"));
                contentProviderContext.placeholders.put("contentType", pathSegments.get(0));

                com.nudroid.annotation.testbed.MyCacheInterceptor lMyCacheInterceptor = 
                        new com.nudroid.annotation.testbed.MyCacheInterceptor();

                lMyCacheInterceptor.onCreate(contentProviderContext);
                lMyCacheInterceptor.beforeQuery(contentProviderContext);


                result = mDelegate.contentTypeExtra(contentProviderContext.placeholders.get("contentType"), contentProviderContext.placeholders.get("extra"));
                result = lMyCacheInterceptor.afterQuery(contentProviderContext, result);

                return result;
            }

                java.util.List<String> pathSegments = uri.getPathSegments();

                contentProviderContext = new ContentProviderContext(context, uri, projection,
                        selection, selectionArgs, sortOrder, null);

                contentProviderContext.placeholders.put("contentType", pathSegments.get(0));

                com.nudroid.annotation.testbed.MyCacheInterceptor lMyCacheInterceptor = 
                        new com.nudroid.annotation.testbed.MyCacheInterceptor();

                lMyCacheInterceptor.onCreate(contentProviderContext);
                lMyCacheInterceptor.beforeQuery(contentProviderContext);


                result = mDelegate.contentType(contentProviderContext.placeholders.get("contentType"));
                result = lMyCacheInterceptor.afterQuery(contentProviderContext, result);

                return result;


                    
        }

        default:

            throw new IllegalArgumentException(String.format("@Query URI %s is not mapped by content provider delegate %s",
                    uri, mDelegate.getClass()));
        }
    }

    /**
     * @see     android.content.ContentProvider#update(android.net.Uri, android.content.ContentValues,
     *      java.lang.String, java.lang.String[])
     */
    public int update(Context context, Uri uri, ContentValues contentValues, String selection, String[] selectionArgs) {

        ContentProviderContext contentProviderContext = null;
        int result = 0;

        switch (URI_MATCHER.match(uri)) {
        default:

            throw new IllegalArgumentException(String.format("Update URI %s is not mapped by content provider delegate %s",
                    uri, mDelegate.getClass()));
        }
    }

    /**
     * @see     android.content.ContentProvider#insert(android.net.Uri, android.content.ContentValues)
     */
    public Uri insert(Context context, Uri uri, ContentValues values) {

        return null;
    }


    /**
     * @see     android.content.ContentProvider#delete(android.net.Uri, java.lang.String,
     *      java.lang.String[])
     */
    public int delete(Context context, Uri uri, String selection, String[] selectionArgs) {

        return 0;
    }

    /**
     * @see     android.content.ContentProvider#getType(android.net.Uri)
     */
    public String getType(Context context, Uri uri) {

        return null;
    }

    @SuppressWarnings({ "unused", "unchecked" })
    private <T> T convert(String queryParameter, Class<T> clazz) {

        if (clazz.equals(Integer.class)) {
            return (T) Integer.valueOf(Integer.parseInt(queryParameter));
        }

        if (clazz.equals(Long.class)) {
            return (T) Long.valueOf(Long.parseLong(queryParameter));
        }

        if (clazz.equals(Float.class)) {
            return (T) Float.valueOf(Float.parseFloat(queryParameter));
        }

        if (clazz.equals(Double.class)) {
            return (T) Double.valueOf(Double.parseDouble(queryParameter));
        }

        throw new IllegalArgumentException(String.format("Unable to convert string '%s' to type %s.", queryParameter, clazz.getName()));
    }
}