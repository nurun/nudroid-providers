/*
 * Copyright (c) 2014 Nurun Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */



apply plugin:'java'

configurations{ emma }

dependencies{
    emma "emma:emma:2.1.5320"
    emma "emma:emma_ant:2.1.5320"
}

project.ext {
	emmaConvention = new EmmaPluginConvention(project)
}

project.convention.plugins.emma = project.emmaConvention

class EmmaPluginConvention{
    def verbosityLevel = "info"
    def reportPath;
    def coverageFileName;
    def tmpDir;
    def instrDir;
    def metaDataFilePath;

    def emma(Closure close){
        close.delegate = this;
        close.run()
    }

    EmmaPluginConvention(Project project){
        reportPath          = "${project.reporting.baseDir}/emma"
        coverageFileName    = "coverage"
        tmpDir              = "${project.buildDir}/tmp/emma"
        instrDir            = "${tmpDir}/instr"
        metaDataFilePath    = "${tmpDir}/metadata.emma"
    }
}

test {
    // add EMMA related JVM args to our tests
    jvmArgs "-XX:-UseSplitVerifier", "-Demma.coverage.out.file=$buildDir/tmp/emma/metadata.emma", "-Demma.coverage.out.merge=true"

    doFirst {
        println "Instrumenting the classes at " + sourceSets.main.output.classesDir.absolutePath
        // define the custom EMMA ant tasks
        ant.taskdef( resource:"emma_ant.properties", classpath: configurations.emma.asPath)

        ant.path(id:"run.classpath") {
            pathelement(location:sourceSets.main.output.classesDir.absolutePath)
        }
        def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma/instr")
        emmaInstDir.mkdirs()
        println "Creating $emmaInstDir to instrument from " +       sourceSets.main.output.classesDir.absolutePath
        // instruct our compiled classes and store them at $buildDir/tmp/emma/instr
        ant.emma(enabled: 'true', verbosity:'info'){
            instr(merge:"true", destdir: emmaInstDir.absolutePath, instrpathref:"run.classpath",
            metadatafile: new File(emmaInstDir, '/metadata.emma').absolutePath) {
                instrpath {
                    fileset(dir:sourceSets.main.output.classesDir.absolutePath, includes:"**/*.class")
                }
            }
        }
        setClasspath(files("$buildDir/tmp/emma/instr") + configurations.emma + getClasspath())
    }

    // The report should be generated directly after the tests are done.
    // We create three types (txt, html, xml) of reports here. Running your build script now should
    // result in output like that:
    doLast {
        def srcDir = sourceSets.main.java.srcDirs.toArray()
        println "Creating test coverage reports for classes " + srcDir
        def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma")
        ant.emma(enabled:"true"){
            new File("$buildDir/reports/emma").mkdirs()
            report(sourcepath: srcDir.join(",")){
                fileset(dir: emmaInstDir.absolutePath){ include(name:"**/*.emma") }
                txt(outfile:"$buildDir/reports/emma/coverage.txt")
                html(outfile:"$buildDir/reports/emma/coverage.html")
                xml(outfile:"$buildDir/reports/emma/coverage.xml")
            }
        }
        println "Test coverage reports available at $buildDir/reports/emma."
        println "txt: $buildDir/reports/emma/coverage.txt"
        println "Test $buildDir/reports/emma/coverage.html"
        println "Test $buildDir/reports/emma/coverage.xml"
    }
}
