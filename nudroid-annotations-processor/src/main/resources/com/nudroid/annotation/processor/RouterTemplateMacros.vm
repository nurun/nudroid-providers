##-----------------------------------------------------------------
## Adds a new line followed by a string.
##
## Param: $index      - pass in $velocityCount
## Param: $list       - pass in your velocity list variable
## Param: $string - The string to be written after a new line.
##-----------------------------------------------------------------
#macro( newline $index $list $string )
#set ( $lastone = $list.size() )
#if( $index <= $lastone )${newline}${string}#else${newline}#end
#end
########################################################################################################################
##-----------------------------------------------------------------
## Add delimiters in a delimiter separated list to all items but the last
##
## Param: $index      - pass in $velocityCount
## Param: $list       - pass in your velocity list variable
## Param: $delimiter  - the delimiter to use. This method will not add spaces by itself
##                      so provide the necessary space for this argument. For example: ", "
##-----------------------------------------------------------------
#macro( delimiterIfNeeded $index $list $delimiter )
#set ( $lastone = $list.size() - 1 )
#if( $index <= $lastone )$delimiter#else#end
#end
########################################################################################################################
##-----------------------------------------------------------------
## Calculates the if statement for query parameter name matching
## Param: $methodParameterNames - The list of method parameter names
##-----------------------------------------------------------------
#macro( generateQueryParameterIfStatement $methodParameterNames)
#if ( ${methodParameterNames.size()} > 0 )    
if ( #generateQueryParameterNamesMatcher($methodParameterNames) ) {
#end
#end
########################################################################################################################
##-----------------------------------------------------------------
## Generates the source code conditional check to match all method query
## parameters with the URI query parameters
##
## Param: $methodParameterNames - The list of method parameter names
##-----------------------------------------------------------------
#macro( generateQueryParameterNamesMatcher $methodParameterNames)
#if ( ${methodParameterNames.size()} > 0 )
#foreach( $parameterName in $methodParameterNames )uri.getQueryParameterNames().contains("$parameterName")#delimiterIfNeeded( $velocityCount $methodParameterNames " && " )#end
#end
#end
########################################################################################################################
##-----------------------------------------------------------------
## Populates the content provider context placeholder map
##
## Param: $paramaters - the list of path of query placeholder parameters
##-----------------------------------------------------------------
#macro( generateConcreteAnnotationConstructor $literals )
#foreach( $literal in $literals )
#if ( ${literal.isString()} )
contentProviderContext.expand(${literal.getLiteralValue()})#delimiterIfNeeded( $velocityCount $literals ", " )
#else
${literal.getLiteralValue()}#delimiterIfNeeded( $velocityCount $literals ", " )
#end
#end
#end
########################################################################################################################
##-----------------------------------------------------------------
## Populates the content provider context placeholder map
##
## Param: $paramaters - the list of path of query placeholder parameters
##-----------------------------------------------------------------
#macro( populateContextPlaceholder $paramaters )
#foreach( $parameter in $paramaters )
#if( $parameter.isPathParameter() )
contentProviderContext.placeholders.put("${parameter.getPlaceholderName()}", pathSegments.get(${parameter.getKeyName()}));#newline($velocityCount $paramaters "                ")                
#elseif( $parameter.isQueryParameter() )
contentProviderContext.placeholders.put("${parameter.getPlaceholderName()}", uri.getQueryParameter("${parameter.getKeyName()}"));#newline($velocityCount $paramaters "                ")
#end
#end
#end
########################################################################################################################
##-----------------------------------------------------------------
## Generates the parameter list for the delegate method invokation
##
## Param: $paramaters - the list of Parameter objects for the method invokation
##-----------------------------------------------------------------
#macro( generateParamsList $paramaters )
#foreach( $parameter in $paramaters )
#if(     $parameter.isContext() )
contentProviderContext.context#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif(     $parameter.isProjection() )
contentProviderContext.projection#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isSelection() )
contentProviderContext.selection#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isSelectionArgs() )
contentProviderContext.selectionArgs#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isSortOrder() )
contentProviderContext.sortOrder#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isContentValues() )
contentProviderContext.contentValues#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isContentUri() )
contentProviderContext.uri#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isPathParameter() || $parameter.isQueryParameter() )
#if( $parameter.isString())
contentProviderContext.placeholders.get("${parameter.getPlaceholderName()}")#delimiterIfNeeded( $velocityCount $paramaters ", " )
#else
convert(contentProviderContext.placeholders.get("${parameter.getPlaceholderName()}"), ${parameter.getParameterType()}.class)#delimiterIfNeeded( $velocityCount $paramaters ", " )##This will be reoplaced by conversion later on.
#end
#else
    null#delimiterIfNeeded( $velocityCount $paramaters ", " )
#end
#end
#end