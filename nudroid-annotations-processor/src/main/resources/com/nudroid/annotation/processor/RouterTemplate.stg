import "RouterTemplateQuery.stg"
import "RouterTemplateUpdate.stg"

addMatcherUris(uri) ::= <<
URI_MATCHER.addURI("<uri.authorityName>", "<uri.normalizedPath>", <uri.id>);
>>




RouterTemplate(delegateClass) ::= <<
<if(delegateClass.basePackageName)>
package <delegateClass.basePackageName>;
<endif>

import android.content.Context;
import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;
import android.content.UriMatcher;

import com.nudroid.provider.interceptor.ContentProviderContext;

/**
 * @author Auto-generated by Nudroid's provider annotation processor.
 */
public class <delegateClass.routerSimpleName> {

    static final UriMatcher URI_MATCHER;

    static {
        URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);

        <delegateClass.matcherUris:addMatcherUris(); separator="\n">
    }

    private <delegateClass.qualifiedName> mDelegate;
    
    public <delegateClass.routerSimpleName>(<delegateClass.qualifiedName> delegate) {
    
        this.mDelegate = delegate;
    }

    <RouterTemplateQuery(delegateClass)>
    
    <RouterTemplateUpdate(delegateClass)>

    /**
     * @see     android.content.ContentProvider#insert(android.net.Uri, android.content.ContentValues)
     */
    public Uri insert(Context context, Uri uri, ContentValues values) {

        return null;
    }
    
    
    /**
     * @see     android.content.ContentProvider#delete(android.net.Uri, java.lang.String,
     *      java.lang.String[])
     */
    public int delete(Context context, Uri uri, String selection, String[] selectionArgs) {

        return 0;
    }
    
    /**
     * @see     android.content.ContentProvider#getType(android.net.Uri)
     */
    public String getType(Context context, Uri uri) {

        return null;
    }
    
    @SuppressWarnings({ "unused", "unchecked" })
    private \<T> T convert(String queryParameter, Class\<T> clazz) {

        if (clazz.equals(Integer.class)) {
            return (T) Integer.valueOf(Integer.parseInt(queryParameter));
        }

        if (clazz.equals(Long.class)) {
            return (T) Long.valueOf(Long.parseLong(queryParameter));
        }

        if (clazz.equals(Float.class)) {
            return (T) Float.valueOf(Float.parseFloat(queryParameter));
        }

        if (clazz.equals(Double.class)) {
            return (T) Double.valueOf(Double.parseDouble(queryParameter));
        }
        
        throw new IllegalArgumentException(String.format("Unable to convert string '%s' to type %s.", queryParameter, clazz.getName()));
    }
}
>>