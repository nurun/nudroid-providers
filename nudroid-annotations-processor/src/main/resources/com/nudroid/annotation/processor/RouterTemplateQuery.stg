query_generateDelegateMethodParameterList(parameter) ::= <%
    <if(parameter.context)>
        contentProviderContext.context
    <elseif(parameter.projection)>
        contentProviderContext.projection
    <elseif(parameter.isSelection)>
        contentProviderContext.selection
    <elseif(parameter.selectionArgs)>
        contentProviderContext.selectionArgs
    <elseif(parameter.sortOrder)>
        contentProviderContext.sortOrder
    <elseif(parameter.contentValues)>
        contentProviderContext.contentValues
    <elseif(parameter.contentUri)>
        contentProviderContext.uri
    <elseif(parameter.pathParameter)>
        <if(parameter.string)>
            contentProviderContext.placeholders.get("<parameter.placeholderName>")
        <else>
            convert(contentProviderContext.placeholders.get("<parameter.placeholderName>"), <parameter.parameterType>.class)
        <endif>
    <elseif(parameter.queryParameter)>
        <if(parameter.string)>
            contentProviderContext.placeholders.get("<parameter.placeholderName>")
        <else>
            convert(contentProviderContext.placeholders.get("<parameter.placeholderName>"), <parameter.parameterType>.class)
        <endif>
    <else>
        null
    <endif>
%>




query_generateAfterMethodInterceptorInvocations(interceptor) ::= <%

    result = l<interceptor.simpleName>.afterQuery(contentProviderContext, result);
%>




query_generateConcreteAnnotationConstructor(literal) ::= <%
    <if(literal.string)>
        contentProviderContext.expand(<literal.literalValue>)
    <else>
        <literal.literalValue>
    <endif>
%>




query_generateBeforeMethodInterceptorInvocations(interceptor) ::= <<
<if(interceptor.customConstructor)>
<interceptor.qualifiedName> l<interceptor.simpleName> = 
    new <interceptor.qualifiedName>(
            new <interceptor.concreteAnnotationQualifiedName>(
                <interceptor.concreteAnnotationConstructorArgumentLiterals:query_generateConcreteAnnotationConstructor(); separator=", ">));
                
<else>
<interceptor.qualifiedName> l<interceptor.simpleName> = 
        new <interceptor.qualifiedName>();
        
<endif>
l<interceptor.simpleName>.onCreate(contentProviderContext);
l<interceptor.simpleName>.beforeQuery(contentProviderContext);

>>




query_populatePathContextPlaceholder(placeholder) ::= <%
    contentProviderContext.placeholders.put("<placeholder.placeholderName>", pathSegments.get(<placeholder.keyName>));
%>




query_populateQueryContextPlaceholder(placeholder) ::= <%
    contentProviderContext.placeholders.put("<placeholder.placeholderName>", uri.getQueryParameter("<placeholder.keyName>"));
%>




query_generateQueryParameterIfStatement(queryParameterName) ::= <%
    uri.getQueryParameterNames().contains("<queryParameterName>")
%>




query_generateDelegateMethodCode(delegateUri) ::= <<

<if(!delegateUri.queryDelegateMethod.queryStringParameterNames.empty)>
if (<delegateUri.queryDelegateMethod.queryStringParameterNames:query_generateQueryParameterIfStatement(); separator=" && ">) {
<endif>
                
    <if(delegateUri.queryDelegateMethod.uriPlaceholders)>
    java.util.List\<String> pathSegments = uri.getPathSegments();
    
    <endif>
    contentProviderContext = new ContentProviderContext(context, uri, projection,
            selection, selectionArgs, sortOrder, null);
            
    <delegateUri.queryDelegateMethod.queryStringPlaceholderParameters:query_populateQueryContextPlaceholder(); separator="\n">
    <delegateUri.queryDelegateMethod.pathPlaceholderParameters:query_populatePathContextPlaceholder(); separator="\n">
    
    <delegateUri.queryDelegateMethod.beforeInterceptorList:query_generateBeforeMethodInterceptorInvocations(); separator="\n">
    result = mDelegate.<delegateUri.queryDelegateMethod.name>(<delegateUri.queryDelegateMethod.parameters:query_generateDelegateMethodParameterList(); separator=", ">);
    <delegateUri.queryDelegateMethod.afterInterceptorList:query_generateAfterMethodInterceptorInvocations(); separator="\n">
    
    return result;
<if(!delegateUri.queryDelegateMethod.queryStringParameterNames.empty)>
}
<endif>
>>




query_createCaseStatements(matcherUri) ::= <<
<if(matcherUri.queryDelegateUris)>
case <matcherUri.id>:
{
    <matcherUri.queryDelegateUris:query_generateDelegateMethodCode(); separator="\n">

<if(matcherUri.queryStringMatchersOnly)>
    throw new IllegalArgumentException(String.format("@Query URI %s is not mapped by content provider delegate %s",
            uri, mDelegate.getClass()));
<endif>            
}
<endif>
>>




RouterTemplateQuery(delegateClass) ::= <<
/**
 * @see android.content.ContentProvider#query(android.net.Uri, java.lang.String[],
 *      java.lang.String, java.lang.String[], java.lang.String)
 */
public Cursor query(Context context, Uri uri, String[] projection, String selection,
        String[] selectionArgs, String sortOrder) {

    ContentProviderContext contentProviderContext = null;
    Cursor result = null;

    switch (URI_MATCHER.match(uri)) {
    <delegateClass.matcherUris:query_createCaseStatements(); separator="\n">
    default:
        
        throw new IllegalArgumentException(String.format("@Query URI %s is not mapped by content provider delegate %s",
                uri, mDelegate.getClass()));
    }
}
>>