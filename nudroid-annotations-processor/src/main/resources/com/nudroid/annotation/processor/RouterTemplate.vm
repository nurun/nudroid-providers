#parse( "com/nudroid/annotation/processor/RouterTemplateMacros.vm" )
#if ( ${delegateClass.getBasePackageName()} != "" )
package ${delegateClass.getBasePackageName()};

#end
import android.content.Context;
import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;
import android.content.UriMatcher;

import com.nudroid.provider.interceptor.ContentProviderContext;

#[[/**
 * @author Auto-generated by Nudroid's provider annotation processor.
 */]]#
public class ${delegateClass.getRouterSimpleName()} {

    static final UriMatcher URI_MATCHER;

    static {
        URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);

#foreach( $uri in ${delegateClass.getMactherUris()} )
        URI_MATCHER.addURI("$uri.getAuthorityName()", "$uri.getNormalizedPath()", $uri.getId());
#end
    }

    private $delegateClass.getQualifiedName() mDelegate;
    
    public ${delegateClass.getRouterSimpleName()}($delegateClass.getQualifiedName() delegate) {
    
        this.mDelegate = delegate;
    }

    #parse( "com/nudroid/annotation/processor/RouterTemplateQuery.vm" )
    
    #parse( "com/nudroid/annotation/processor/RouterTemplateInsert.vm" )
    
    #parse( "com/nudroid/annotation/processor/RouterTemplateUpdate.vm" )
    
    #parse( "com/nudroid/annotation/processor/RouterTemplateDelete.vm" )

    #parse( "com/nudroid/annotation/processor/RouterTemplateGetType.vm" )
    
    @SuppressWarnings({ "unused", "unchecked" })
    private <T> T convert(String queryParameter, Class<T> clazz) {

        if (clazz.equals(Integer.class)) {
            return (T) Integer.valueOf(Integer.parseInt(queryParameter));
        }

        if (clazz.equals(Long.class)) {
            return (T) Long.valueOf(Long.parseLong(queryParameter));
        }

        if (clazz.equals(Float.class)) {
            return (T) Float.valueOf(Float.parseFloat(queryParameter));
        }

        if (clazz.equals(Double.class)) {
            return (T) Double.valueOf(Double.parseDouble(queryParameter));
        }
        
        throw new IllegalArgumentException(String.format("Unable to convert string '%s' to type %s.", queryParameter, clazz.getName()));
    }
}