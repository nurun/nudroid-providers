##-----------------------------------------------------------------
## Adds a new line followed by a string.
##
## Param: $index      - pass in $velocityCount
## Param: $list       - pass in your velocity list variable
## Param: $string - The string to be written after a new line.
##-----------------------------------------------------------------
#macro( newline $index $list $string )
#set ( $lastone = $list.size() - 1 )
#if( $index <= $lastone )${newline}${string}#else${newline}#end
#end
##(End Macro delimiterIfNeeded)------------------------------------
##-----------------------------------------------------------------
## Add delimiters in a delimiter separated list to all items but the last
##
## Param: $index      - pass in $velocityCount
## Param: $list       - pass in your velocity list variable
## Param: $delimiter  - the delimiter to use. This method will not add spaces by itself
##                      so provide the necessary space for this argument. For example: ", "
##-----------------------------------------------------------------
#macro( delimiterIfNeeded $index $list $delimiter )
#set ( $lastone = $list.size() - 1 )
#if( $index <= $lastone )$delimiter#else#end
#end
##(End Macro delimiterIfNeeded)------------------------------------
##
##
##-----------------------------------------------------------------
## Generates the source code conditional check to match all method query
## parameters with the URI query parameters
##
## Param: $methodParameterNames - The list of method parameter names
##-----------------------------------------------------------------
#macro( generateQueryParameterNamesMatcher $methodParameterNames)
queryParameterNames.size() == $methodParameterNames.size()##
#if ($methodParameterNames.size() > 0) && #end
#foreach( $parameterName in $methodParameterNames )queryParameterNames.contains("$parameterName")#delimiterIfNeeded( $velocityCount $methodParameterNames " && " )#end
#end
##(End Macro generateQueryParameterNamesMatcher)-------------------
##
##
##-----------------------------------------------------------------
## Populates the content provider context placeholder map
##
## Param: $paramaters - the list of path of query placeholder parameters
##-----------------------------------------------------------------
#macro( generateConcreteAnnotationConstructor $literals )
#foreach( $literal in $literals )
$literal#delimiterIfNeeded( $velocityCount $literals ", " )
#end##for each $parameter in $paramaters
#end##macro
##(End Macro generateConcreteAnnotationConstructor)-----------------------------------
##
##-----------------------------------------------------------------
## Populates the content provider context placeholder map
##
## Param: $paramaters - the list of path of query placeholder parameters
##-----------------------------------------------------------------
#macro( populateContextPlaceholder $paramaters )
#foreach( $parameter in $paramaters )
#if( $parameter.isPathParameter() )
contentProviderContext.placeholders.put("${parameter.getPlaceholderName()}", pathSegments.get(${parameter.getKeyName()}));#newline($velocityCount $paramaters "                ")                
#elseif( $parameter.isQueryParameter() )
contentProviderContext.placeholders.put("${parameter.getPlaceholderName()}", uri.getQueryParameter("${parameter.getKeyName()}"));#newline($velocityCount $paramaters "                ")
#end##if $parameter.isPathParameter()
#end##for each $parameter in $paramaters
#end##macro
##(End Macro populateContextPlaceholder)-----------------------------------
##
##-----------------------------------------------------------------
## Generates the parameter list for the delegate method invokation
##
## Param: $paramaters - the list of Parameter objects for the method invokation
##-----------------------------------------------------------------
#macro( generateParamsList $paramaters )
#foreach( $parameter in $paramaters )
#if(     $parameter.isContext() )
contentProviderContext.context#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif(     $parameter.isProjection() )
contentProviderContext.projection#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isSelection() )
contentProviderContext.selection#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isSelectionArgs() )
contentProviderContext.selectionArgs#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isSortOrder() )
contentProviderContext.sortOrder#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isContentValues() )
contentProviderContext.contentValues#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isContentUri() )
contentProviderContext.uri#delimiterIfNeeded( $velocityCount $paramaters ", " )
#elseif( $parameter.isPathParameter() || $parameter.isQueryParameter() )
#if( $parameter.isString())
contentProviderContext.placeholders.get("${parameter.getPlaceholderName()}")#delimiterIfNeeded( $velocityCount $paramaters ", " )
#else
contentProviderContext.placeholders.get("${parameter.getPlaceholderName()}")#delimiterIfNeeded( $velocityCount $paramaters ", " )##This will be reoplaced by conversion later on.
#end##if $parameter.isString()
#else
    null#delimiterIfNeeded( $velocityCount $paramaters ", " )
#end##if $parameter.isProjection()
#end##for each $parameter in $paramaters
#end##macro
##(End Macro generateParamsList)-----------------------------------
##
##
#if ( ${delegateClass.getBasePackageName()} != "" )
package ${delegateClass.getBasePackageName()};

#end
import android.content.Context;
import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;
import android.content.UriMatcher;

import com.nudroid.provider.delegate.ContentProviderContext;

#[[/**
 * @author Auto-generated by Nudroid's provider annotation processor.
 */]]#
public class ${delegateClass.getRouterSimpleName()} {

    static final UriMatcher URI_MATCHER;

    static {
        URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);

#foreach( $uri in ${delegateClass.getMactherUris()} )
        URI_MATCHER.addURI("$uri.getAuthorityName()", "$uri.getNormalizedPath()", $uri.getId());
#end
    }

    private $delegateClass.getQualifiedName() mDelegate;
    
    public ${delegateClass.getRouterSimpleName()}($delegateClass.getQualifiedName() delegate) {
    
        this.mDelegate = delegate;
    }

#[[    /**
     * @see     android.content.ContentProvider#query(android.net.Uri, java.lang.String[],
     *      java.lang.String, java.lang.String[], java.lang.String)
     */]]#
    public Cursor query(Context context, Uri uri, String[] projection, String selection,
            String[] selectionArgs, String sortOrder) {

        java.util.Set<String> queryParameterNames = uri.getQueryParameterNames();
    
        switch (URI_MATCHER.match(uri)) {
#foreach( $uriId in $delegateClass.getUriIds() )
        case $uriId:

#foreach( $delegateMethod in $delegateClass.getUriIdToDelegateMethodRegistry().get($uriId) )            
            if (#generateQueryParameterNamesMatcher($delegateMethod.getQueryStringParameterNames())) {

#if ( $delegateMethod.hasUriPlaceholders() )
                java.util.List<String> pathSegments = uri.getPathSegments();
#end
                ContentProviderContext contentProviderContext = new ContentProviderContext(context, uri, projection,
                        selection, selectionArgs, sortOrder, null);
                #populateContextPlaceholder($delegateMethod.getPathPlaceholderParameters())
                #populateContextPlaceholder($delegateMethod.getQueryStringPlaceholderParameters())
                
#foreach($interceptor in $delegateMethod.getBeforeInterceptorList())
#if ( ${interceptor.hasCustomConstructor()} )
                ${interceptor.getQualifiedName()} l${interceptor.getSimpleName()} = 
                    new ${interceptor.getQualifiedName()}(
                        new ${interceptor.getConcreteAnnotationQualifiedName()}(#generateConcreteAnnotationConstructor(${interceptor.getConcreteAnnotationConstructorArgumentLiterals()})));
#else
                ${interceptor.getQualifiedName()} l${interceptor.getSimpleName()} = 
                    new ${interceptor.getQualifiedName()}();
#end
                l${interceptor.getSimpleName()}.onCreate(context);
                l${interceptor.getSimpleName()}.beforeQuery(contentProviderContext);
#end

                Cursor result = mDelegate.${delegateMethod.getName()}(#generateParamsList($delegateMethod.getParameters()));

#foreach($interceptor in $delegateMethod.getAfterInterceptorList())
                result = l${interceptor.getSimpleName()}.afterQuery(contentProviderContext, result);
#end
                return result;
            }
            
#end

            throw new IllegalArgumentException(String.format("Uri %s is not properly mapped in content provider delegate %s",
                    uri, mDelegate.getClass()));
#end
        default:
        
            throw new IllegalArgumentException(String.format("Uri %s is not properly mapped in content provider delegate %s",
                    uri, mDelegate.getClass()));
        }
    }

#[[    /**
     * @see     android.content.ContentProvider#insert(android.net.Uri, android.content.ContentValues)
     */]]#
    public Uri insert(Context context, Uri uri, ContentValues values) {

        return null;
    }
    
#[[    /**
     * @see     android.content.ContentProvider#update(android.net.Uri, android.content.ContentValues,
     *      java.lang.String, java.lang.String[])
     */]]#
    public int update(Context context, Uri uri, ContentValues contentValues, String selection, String[] selectionArgs) {

        return 0;
    }

#[[    /**
     * @see     android.content.ContentProvider#delete(android.net.Uri, java.lang.String,
     *      java.lang.String[])
     */]]#
    public int delete(Context context, Uri uri, String selection, String[] selectionArgs) {

        return 0;
    }
    
#[[    /**
     * @see     android.content.ContentProvider#getType(android.net.Uri)
     */]]#
    public String getType(Context context, Uri uri) {

        return null;
    }

    @SuppressWarnings("unchecked")
    private <T> T convert(String queryParameter, Class<T> clazz) {

        if (clazz.equals(Integer.class)) {
            return (T) Integer.valueOf(Integer.parseInt(queryParameter));
        }

        if (clazz.equals(Long.class)) {
            return (T) Long.valueOf(Long.parseLong(queryParameter));
        }

        if (clazz.equals(Float.class)) {
            return (T) Float.valueOf(Float.parseFloat(queryParameter));
        }

        if (clazz.equals(Double.class)) {
            return (T) Double.valueOf(Double.parseDouble(queryParameter));
        }
        
        throw new IllegalArgumentException(String.format("Unable to convert string '%s' to type %s.", queryParameter, clazz.getName()));
    }
}