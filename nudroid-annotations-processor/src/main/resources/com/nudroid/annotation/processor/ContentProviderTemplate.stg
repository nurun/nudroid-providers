ContentProviderTemplate(delegateClass) ::= <<
<if(delegateClass.basePackageName)>
package <delegateClass.basePackageName>;
<endif>

import android.content.ContentProvider;
import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;

<if(delegateClass.contentProviderDelegateInterface)>
import com.nudroid.provider.delegate.ContentProviderDelegate;
<endif>

/*
 * This is the basic XML you can use to configure this content provider in AndroidManifest.xml
 * \<provider
<if(delegateClass.basePackageName)>    
 * android:name="<delegateClass.basePackageName>.<delegateClass.contentProviderSimpleName>"
<else>
 * android:name="<delegateClass.contentProviderSimpleName>"
<endif>
 * android:authorities="<delegateClass.authority.name>"
 * android:exported="\<true|false>"
 * android:grantUriPermissions="\<true|false>"
 * android:label="\<label>"
 * android:readPermission="\<read_permission>"
 * android:writePermission="\<write_permission>" />
 */

/**
 * @author Auto-generated by Nudroid's provider annotation processor.
 */
public class <delegateClass.contentProviderSimpleName> extends ContentProvider {

    private <delegateClass.routerSimpleName> mContentProviderRouter;

    /**
     * Creates the router to this class delegate.
     * 
     * @see android.content.ContentProvider#onCreate()
     */
    @Override
    public boolean onCreate() {

        final <delegateClass.qualifiedName> delegate = new <delegateClass.qualifiedName>();
        mContentProviderRouter = new <delegateClass.routerSimpleName>(delegate);

<if(delegateClass.contentProviderDelegateInterface)>
        boolean result = ((ContentProviderDelegate) delegate).onCreate(getContext());
        return result;
<else>
        return true;
<endif>
    }

    /**
     * Forwards queries to this class' router.
     * 
     * @see android.content.ContentProvider#query(android.net.Uri, java.lang.String[], java.lang.String,
     *      java.lang.String[], java.lang.String)
     */
    @Override
    public Cursor query(Uri contentUri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {

        return mContentProviderRouter.query(getContext(), contentUri, projection, selection, selectionArgs, sortOrder);
    }

    /**
     * Forwards inserts to this class' router.
     * 
     * @see android.content.ContentProvider#insert(android.net.Uri, android.content.ContentValues)
     */
    @Override
    public Uri insert(Uri contentUri, ContentValues contentValues) {

        return mContentProviderRouter.insert(getContext(), contentUri, contentValues);
    }

    /**
     * Forwards updates to this class' router.
     * 
     * @see android.content.ContentProvider#update(android.net.Uri, android.content.ContentValues, java.lang.String,
     *      java.lang.String[])
     */
    @Override
    public int update(Uri contentUri, ContentValues contentValues, String selection, String[] selectionArgs) {
        return mContentProviderRouter.update(getContext(), contentUri, contentValues, selection, selectionArgs);
    }

    /**
     * Forwards deletes to this class' router.
     * 
     * @see android.content.ContentProvider#delete(android.net.Uri, java.lang.String, java.lang.String[])
     */
    @Override
    public int delete(Uri contentUri, String selection, String[] selectionArgs) {
        return mContentProviderRouter.delete(getContext(), contentUri, selection, selectionArgs);
    }

    /**
     * Forwards getType() calls to this class' router.
     * 
     * @see android.content.ContentProvider#getType(android.net.Uri)
     */
    @Override
    public String getType(Uri contentUri) {
        return mContentProviderRouter.getType(getContext(), contentUri);
    }
}>>